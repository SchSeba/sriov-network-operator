/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/sriov-network-operator/pkg/apis/sriovnetwork/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SriovIBNetworkLister helps list SriovIBNetworks.
type SriovIBNetworkLister interface {
	// List lists all SriovIBNetworks in the indexer.
	List(selector labels.Selector) (ret []*v1.SriovIBNetwork, err error)
	// SriovIBNetworks returns an object that can list and get SriovIBNetworks.
	SriovIBNetworks(namespace string) SriovIBNetworkNamespaceLister
	SriovIBNetworkListerExpansion
}

// sriovIBNetworkLister implements the SriovIBNetworkLister interface.
type sriovIBNetworkLister struct {
	indexer cache.Indexer
}

// NewSriovIBNetworkLister returns a new SriovIBNetworkLister.
func NewSriovIBNetworkLister(indexer cache.Indexer) SriovIBNetworkLister {
	return &sriovIBNetworkLister{indexer: indexer}
}

// List lists all SriovIBNetworks in the indexer.
func (s *sriovIBNetworkLister) List(selector labels.Selector) (ret []*v1.SriovIBNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SriovIBNetwork))
	})
	return ret, err
}

// SriovIBNetworks returns an object that can list and get SriovIBNetworks.
func (s *sriovIBNetworkLister) SriovIBNetworks(namespace string) SriovIBNetworkNamespaceLister {
	return sriovIBNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SriovIBNetworkNamespaceLister helps list and get SriovIBNetworks.
type SriovIBNetworkNamespaceLister interface {
	// List lists all SriovIBNetworks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SriovIBNetwork, err error)
	// Get retrieves the SriovIBNetwork from the indexer for a given namespace and name.
	Get(name string) (*v1.SriovIBNetwork, error)
	SriovIBNetworkNamespaceListerExpansion
}

// sriovIBNetworkNamespaceLister implements the SriovIBNetworkNamespaceLister
// interface.
type sriovIBNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SriovIBNetworks in the indexer for a given namespace.
func (s sriovIBNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1.SriovIBNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SriovIBNetwork))
	})
	return ret, err
}

// Get retrieves the SriovIBNetwork from the indexer for a given namespace and name.
func (s sriovIBNetworkNamespaceLister) Get(name string) (*v1.SriovIBNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sriovibnetwork"), name)
	}
	return obj.(*v1.SriovIBNetwork), nil
}
