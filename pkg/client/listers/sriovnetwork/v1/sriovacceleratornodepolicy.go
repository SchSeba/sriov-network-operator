/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/sriov-network-operator/pkg/apis/sriovnetwork/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SriovAcceleratorNodePolicyLister helps list SriovAcceleratorNodePolicies.
type SriovAcceleratorNodePolicyLister interface {
	// List lists all SriovAcceleratorNodePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.SriovAcceleratorNodePolicy, err error)
	// SriovAcceleratorNodePolicies returns an object that can list and get SriovAcceleratorNodePolicies.
	SriovAcceleratorNodePolicies(namespace string) SriovAcceleratorNodePolicyNamespaceLister
	SriovAcceleratorNodePolicyListerExpansion
}

// sriovAcceleratorNodePolicyLister implements the SriovAcceleratorNodePolicyLister interface.
type sriovAcceleratorNodePolicyLister struct {
	indexer cache.Indexer
}

// NewSriovAcceleratorNodePolicyLister returns a new SriovAcceleratorNodePolicyLister.
func NewSriovAcceleratorNodePolicyLister(indexer cache.Indexer) SriovAcceleratorNodePolicyLister {
	return &sriovAcceleratorNodePolicyLister{indexer: indexer}
}

// List lists all SriovAcceleratorNodePolicies in the indexer.
func (s *sriovAcceleratorNodePolicyLister) List(selector labels.Selector) (ret []*v1.SriovAcceleratorNodePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SriovAcceleratorNodePolicy))
	})
	return ret, err
}

// SriovAcceleratorNodePolicies returns an object that can list and get SriovAcceleratorNodePolicies.
func (s *sriovAcceleratorNodePolicyLister) SriovAcceleratorNodePolicies(namespace string) SriovAcceleratorNodePolicyNamespaceLister {
	return sriovAcceleratorNodePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SriovAcceleratorNodePolicyNamespaceLister helps list and get SriovAcceleratorNodePolicies.
type SriovAcceleratorNodePolicyNamespaceLister interface {
	// List lists all SriovAcceleratorNodePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SriovAcceleratorNodePolicy, err error)
	// Get retrieves the SriovAcceleratorNodePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1.SriovAcceleratorNodePolicy, error)
	SriovAcceleratorNodePolicyNamespaceListerExpansion
}

// sriovAcceleratorNodePolicyNamespaceLister implements the SriovAcceleratorNodePolicyNamespaceLister
// interface.
type sriovAcceleratorNodePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SriovAcceleratorNodePolicies in the indexer for a given namespace.
func (s sriovAcceleratorNodePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.SriovAcceleratorNodePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SriovAcceleratorNodePolicy))
	})
	return ret, err
}

// Get retrieves the SriovAcceleratorNodePolicy from the indexer for a given namespace and name.
func (s sriovAcceleratorNodePolicyNamespaceLister) Get(name string) (*v1.SriovAcceleratorNodePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sriovacceleratornodepolicy"), name)
	}
	return obj.(*v1.SriovAcceleratorNodePolicy), nil
}
